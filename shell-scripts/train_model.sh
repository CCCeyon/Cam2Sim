#!/usr/bin/env bash
set -euo pipefail

# ---------------------------------------------
# Generated by ChatGPT for training a Stable Diffusion model with LoRA and ControlNet.
#
# Usage:
#   ./train_model.sh /path/to/diffusers <lora_dataset_name> <models_bundle_name>
#
# Example:
#   ./train_model.sh ~/code/diffusers cccccsys/guericke_dataset_2 my_aug20_bundle
#
# Arguments:
#   1) DIFFUSERS_DIR         : Path to the diffusers repo (must contain its Python venv)
#   2) LORA_DATASET_NAME     : Dataset name used for LoRA text-to-image training
#   3) MODELS_BUNDLE_NAME    : New folder name inside ./models where outputs are copied/renamed
#
# Notes:
#  - The script tries to activate a venv at one of:
#       <diffusers>/.venv, <diffusers>/venv, <diffusers>/env
#    (Override by pre-activating your venv before running, if you prefer.)
#  - It runs the trainings sequentially (never concurrently) and waits for each to finish.
#  - After all three trainings finish, it copies their output folders into:
#         ./models/<MODELS_BUNDLE_NAME>/
#    and renames them as requested:
#         stable_diffusion, controlnet_segmentation, controlnet_tempconsistency
#  - Finally, it writes config.json with your provided contents.
# ---------------------------------------------

if [[ $# -lt 3 ]]; then
  echo "Usage: $0 /path/to/diffusers <dataset_name> <models_bundle_name>"
  exit 1
fi

DIFFUSERS_DIR="$(cd "$1" && pwd)"
LORA_DATASET_NAME="$2"
MODELS_BUNDLE_NAME="$3"

# ---- sanity checks ----
if [[ ! -d "$DIFFUSERS_DIR" ]]; then
  echo "Error: diffusers directory not found: $DIFFUSERS_DIR"
  exit 1
fi

# ---- Clone cityscapes ControlNet if missing ----
if [[ ! -d "./cityscapes-controlnet-sd15" ]]; then
  echo "==> Cloning cityscapes-controlnet-sd15 from HuggingFace..."
  git clone https://huggingface.co/doguilmak/cityscapes-controlnet-sd15
fi

CONTROLNET_MODEL_PATH="./cityscapes-controlnet-sd15/full_pipeline/controlnet"

# Try to find examples directories with common casings
find_examples_dir() {
  # $1 = base path (e.g., "$DIFFUSERS_DIR/examples")
  # $2 = desired subdir (case-insensitive), e.g., "text_to_image" or "controlnet"
  local base="$1"
  local want_ci="$2"
  shopt -s nullglob
  for d in "$base"/*; do
    if [[ -d "$d" ]]; then
      local bn
      bn="$(basename "$d")"
      if [[ "${bn,,}" == "${want_ci,,}" ]]; then
        echo "$d"
        return 0
      fi
    fi
  done
  return 1
}

EXAMPLES_DIR="$DIFFUSERS_DIR/examples"
if [[ ! -d "$EXAMPLES_DIR" ]]; then
  echo "Error: examples directory not found at $EXAMPLES_DIR"
  exit 1
fi

TEXT2IMG_DIR="$(find_examples_dir "$EXAMPLES_DIR" "text_to_image" || true)"
CONTROLNET_DIR="$(find_examples_dir "$EXAMPLES_DIR" "controlnet" || true)"

if [[ -z "${TEXT2IMG_DIR:-}" ]]; then
  echo "Error: could not locate examples/text_to_image (case-insensitive) under $EXAMPLES_DIR"
  exit 1
fi
if [[ -z "${CONTROLNET_DIR:-}" ]]; then
  echo "Error: could not locate examples/controlnet (case-insensitive) under $EXAMPLES_DIR"
  exit 1
fi

# ---- activate venv ----
activate_if_exists() {
  local cand="$1"
  if [[ -f "$cand/bin/activate" ]]; then
    # shellcheck disable=SC1090
    source "$cand/bin/activate"
    return 0
  fi
  return 1
}

if ! activate_if_exists "$DIFFUSERS_DIR/.venv"; then
  if ! activate_if_exists "$DIFFUSERS_DIR/venv"; then
    if ! activate_if_exists "$DIFFUSERS_DIR/env"; then
      echo "Warning: no venv found in .venv/, venv/, or env/ under $DIFFUSERS_DIR."
      echo "If accelerate/torch isn't on PATH, please activate your environment before running."
    fi
  fi
fi

# Confirm accelerate is available
if ! command -v accelerate >/dev/null 2>&1; then
  echo "Error: 'accelerate' CLI not found. Make sure your Python environment is active and accelerate is installed."
  exit 1
fi

# ---- training parameters (as requested) ----
LORA_OUT="out1"
CN_SEG_OUT="out_seg"
CN_TEMP_OUT="out_tempcons"

PRETRAINED_SD="stable-diffusion-v1-5/stable-diffusion-v1-5"
NUM_WORKERS=8
RESOLUTION=512

# ---- 1) LoRA training (text_to_image) ----
echo "==> Starting LoRA text-to-image training in: $TEXT2IMG_DIR"
pushd "$TEXT2IMG_DIR" >/dev/null

set -x
accelerate launch --mixed_precision="bf16" train_text_to_image_lora.py \
  --pretrained_model_name_or_path="$PRETRAINED_SD" \
  --dataset_name="$LORA_DATASET_NAME" \
  --dataloader_num_workers="$NUM_WORKERS" \
  --resolution="$RESOLUTION" \
  --train_batch_size=16 \
  --gradient_accumulation_steps=4 \
  --num_train_epochs=10 \
  --learning_rate=1e-04 \
  --max_grad_norm=1 \
  --lr_scheduler="cosine" \
  --lr_warmup_steps=0 \
  --output_dir="$LORA_OUT" \
  --checkpointing_steps=500 \
  --caption_column="caption"
set +x

# Verify output exists
if [[ ! -d "$TEXT2IMG_DIR/$LORA_OUT" ]]; then
  echo "Error: expected LoRA output directory not found: $TEXT2IMG_DIR/$LORA_OUT"
  popd >/dev/null
  exit 1
fi
popd >/dev/null

# ---- 2) ControlNet (segmentation) ----
echo "==> Starting ControlNet segmentation training in: $CONTROLNET_DIR"
pushd "$CONTROLNET_DIR" >/dev/null

set -x
accelerate launch --mixed_precision="fp16" train_controlnet.py \
  --pretrained_model_name_or_path="$PRETRAINED_SD" \
  --output_dir="$CN_SEG_OUT" \
  --dataset_name="$LORA_DATASET_NAME" \
  --controlnet_model_name_or_path="$CONTROLNET_MODEL_PATH" \
  --conditioning_image_column=segmentation \
  --image_column=image \
  --caption_column=caption \
  --resolution="$RESOLUTION" \
  --learning_rate=1e-5 \
  --train_batch_size=12 \
  --num_train_epochs=10 \
  --tracker_project_name="controlnet" \
  --enable_xformers_memory_efficient_attention \
  --checkpointing_steps=1000
set +x

if [[ ! -d "$CONTROLNET_DIR/$CN_SEG_OUT" ]]; then
  echo "Error: expected ControlNet segmentation output not found: $CONTROLNET_DIR/$CN_SEG_OUT"
  popd >/dev/null
  exit 1
fi

# ---- 3) ControlNet (temporal consistency) ----
echo "==> Starting ControlNet temporal-consistency training in: $CONTROLNET_DIR"

set -x
accelerate launch --mixed_precision="fp16" train_controlnet.py \
  --pretrained_model_name_or_path="$PRETRAINED_SD" \
  --output_dir="$CN_TEMP_OUT" \
  --dataset_name="$LORA_DATASET_NAME" \
  --conditioning_image_column=previous \
  --image_column=image \
  --caption_column=caption \
  --resolution="$RESOLUTION" \
  --learning_rate=1e-5 \
  --train_batch_size=12 \
  --num_train_epochs=10 \
  --tracker_project_name="controlnet" \
  --enable_xformers_memory_efficient_attention \
  --checkpointing_steps=1000
set +x

if [[ ! -d "$CONTROLNET_DIR/$CN_TEMP_OUT" ]]; then
  echo "Error: expected ControlNet temporal output not found: $CONTROLNET_DIR/$CN_TEMP_OUT"
  popd >/dev/null
  exit 1
fi
popd >/dev/null

# ---- 4) Package results into ./models/<MODELS_BUNDLE_NAME>/ ----
SCRIPT_DIR="$(pwd)"  # assume we are running the script from the folder that contains ./models
MODELS_ROOT="$SCRIPT_DIR/models"
DEST_DIR="$MODELS_ROOT/$MODELS_BUNDLE_NAME"

mkdir -p "$DEST_DIR"

echo "==> Copying outputs into: $DEST_DIR"
# Copy and rename:
#   - LoRA out1 -> stable_diffusion
#   - ControlNet out_seg -> controlnet_segmentation
#   - ControlNet out_tempcons -> controlnet_tempconsistency

# Remove targets if they already exist (fresh copy)
rm -rf "$DEST_DIR/stable_diffusion" "$DEST_DIR/controlnet_segmentation" "$DEST_DIR/controlnet_tempconsistency"

cp -a "$TEXT2IMG_DIR/$LORA_OUT"            "$DEST_DIR/stable_diffusion"
cp -a "$CONTROLNET_DIR/$CN_SEG_OUT"        "$DEST_DIR/controlnet_segmentation"
cp -a "$CONTROLNET_DIR/$CN_TEMP_OUT"       "$DEST_DIR/controlnet_tempconsistency"

# ---- 5) Write config.json with the provided content ----
# (Note: The JSON below is exactly as requested.)
cat > "$DEST_DIR/config.json" <<'JSON'
{
  "controlnet_segmentation": "controlnet_segmentation",
  "controlnet_tempconsistency": "controlnet_tempconsistency",
  "stable_diffusion_model": "stable-diffusion-v1-5/stable-diffusion-v1-5",
  "lora_weights": "stable_diffusion/pytorch_lora_weights.safetensors",
  "size": {
    "x": 512,
    "y": 512
  },
  "camera": {
    "position": {
      "x": 1.1,
      "y": 0.0,
      "z": 1.35
    },
    "fov": 55,
    "fps": 24,
    "pitch": 0.0
  }
}
JSON

echo "==> Done."
echo "Packaged models are in: $DEST_DIR"
echo "Folders:"
echo " - $DEST_DIR/stable_diffusion"
echo " - $DEST_DIR/controlnet_segmentation"
echo " - $DEST_DIR/controlnet_tempconsistency"
echo "Config:"
echo " - $DEST_DIR/config.json"
